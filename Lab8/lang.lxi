%{
#include <stdio.h>
#include <string.h>
int lines = 0;
%}

%option noyywrap

STRING		        \"[a-zA-Z0-9]*\"
NUMBER		        [+-]?[1-9][0-9]*|0$
CHARACTER 	        \'[a-zA-Z0-9]\'
LETTER              [a-zA-Z]
LETTER_OR_DIGIT     [a-zA-Z0-9_]
CONST		        {STRING}|{NUMBER}|{CHARACTER}
ID 		            {LETTER}{LETTER_OR_DIGIT}*

%%

task        {printf("Reserved word: %s\n", yytext);}
defines     {printf("Reserved word: %s\n", yytext);}
constant    {printf("Reserved word: %s\n", yytext);}
integer     {printf("Reserved word: %s\n", yytext);}
boolean     {printf("Reserved word: %s\n", yytext);}
string      {printf("Reserved word: %s\n", yytext);}
float       {printf("Reserved word: %s\n", yytext);}
double      {printf("Reserved word: %s\n", yytext);}
otherwise   {printf("Reserved word: %s\n", yytext);}
when    {printf("Reserved word: %s\n", yytext);}
return  {printf("Reserved word: %s\n", yytext);}
console {printf("Reserved word: %s\n", yytext);}
read	{printf("Reserved word: %s\n", yytext);}
write	{printf("Reserved word: %s\n", yytext);}
take	{printf("Reserved word: %s\n", yytext);}
from	{printf("Reserved word: %s\n", yytext);}
list	{printf("Reserved word: %s\n", yytext);}
for	    {printf("Reserved word: %s\n", yytext);}
while	{printf("Reserved word: %s\n", yytext);}

":"     {printf("Separator: %s\n", yytext);}
";"     {printf("Separator: %s\n", yytext);}
","     {printf("Separator: %s\n", yytext);}
"."     {printf("Separator: %s\n", yytext);}
"{"     {printf("Separator: %s\n", yytext);}
"}"     {printf("Separator: %s\n", yytext);}
"("     {printf("Separator: %s\n", yytext);}
")"     {printf("Separator: %s\n", yytext);}
"["     {printf("Separator: %s\n", yytext);}
"]"     {printf("Separator: %s\n", yytext);}

"add"   {printf("Operator: %s\n", yytext);}
"sub"   {printf("Operator: %s\n", yytext);}
"mul"   {printf("Operator: %s\n", yytext);}
"div"   {printf("Operator: %s\n", yytext);}
"<"     {printf("Operator: %s\n", yytext);}
">"     {printf("Operator: %s\n", yytext);}
"<="    {printf("Operator: %s\n", yytext);}
">="    {printf("Operator: %s\n", yytext);}
"!="    {printf("Operator: %s\n", yytext);}
"=="    {printf("Operator: %s\n", yytext);}
"="     {printf("Operator: %s\n", yytext);}
"!"     {printf("Operator: %s\n", yytext);}
"&&"    {printf("Operator: %s\n", yytext);}
"||"    {printf("Operator: %s\n", yytext);}

{ID}	{printf("Identifier: %s\n", yytext);}

{CONST}	{printf("Constant: %s\n", yytext);}

[ \t]+  {}
[\n]+   {lines++;}

[+-]?0[0-9]*    {printf("Illegal constant at line %d: %s\n", lines, yytext);}

[0-9~@#$%^&*/|][a-zA-Z0-9]*    {printf("Illegal identifier at line %d: %s\n", lines, yytext);}

%%
